#include <Enes100.h>

//F is front, B is back, R is right, L is left, D is drive, S is speed for these pin assignments
#define FRD1 8
#define FRD2 7
#define FLD1 10
#define FLD2 11
#define BRD1 6
#define BRD2 5
#define BLD1 12
#define BLD2 13
#define S 9

// Normalize angle to [-π, π]
float normalizeAngle(float angle) {
  while (angle > PI) angle -= 2 * PI;
  while (angle < -PI) angle += 2 * PI;
  return angle;
}

// Proportional angle correction
void correctOrientation(float tf) {
  float ti = Enes100.getTheta();
  float dt = normalizeAngle(tf - ti);

  while (abs(dt) > 0.05) {
    ti = Enes100.getTheta();
    dt = normalizeAngle(tf - ti);
    Enes100.println(dt);
    if (dt > 0) {
      rotateCCW();
    } else {
      rotateCW();
    }
    delay(10);

  }
  stopotv();
}

/* void moveHere(float xf, float yf) {
  float xi = Enes100.getX();
  float yi = Enes100.getY();
  float ti = Enes100.getTheta();
  float quadAngle = 0;

  if (ti >= 3 * PI / 4 || ti < -3 * PI / 4)      quadAngle = PI;
  else if (ti >= PI / 4)                         quadAngle = PI / 2;
  else if (ti >= -PI / 4)                        quadAngle = 0;
  else                                           quadAngle = -PI / 2;

  correctOrientation(quadAngle);

  float tolerance = 0.1;  // Increased tolerance for linear movement

  if (quadAngle == PI/2) { // Robot facing up
      if (abs(yf - yi) > tolerance) {
          if (yf > yi) {
              driveForwards();
              while (abs(yf - yi) > tolerance) {
                  yi = Enes100.getY();
              }
          }
          else {
              driveBackwards();
              while (abs(yf - yi) > tolerance) {
                  yi = Enes100.getY();
              }
          }
      }
      else {
          Tank.turnOffMotors();
      }
      if (abs(xf - xi) > tolerance) {
          correctOrientation(0);
          if (xf > xi) {
              driveForwards();
              while (abs(xf - xi) > tolerance) {
                  xi = Enes100.getX();
              }
          }
          else {
              driveBackwards();
              while (abs(xf - xi) > tolerance) {
                  xi = Enes100.getX();
              }
          }
      }
      else {
          Tank.turnOffMotors();
      }
  }
  else if (quadAngle == 0) { // Robot facing right
      if (abs(xf - xi) > tolerance) {
          if (xf > xi) {
              driveForwards();
              while (abs(xf - xi) > tolerance) {
                  xi = Enes100.getX();
              }
          }
          else {
              driveBackwards();
              while (abs(xf - xi) > tolerance) {
                  xi = Enes100.getX();
              }
          }
      }
      else {
          Tank.turnOffMotors();
      }
      if (abs(yf - yi) > tolerance) {
          correctOrientation(-PI/2);
          if (yf > yi) {
              driveBackwards();
              while (abs(yf - yi) > tolerance) {
                  yi = Enes100.getY();
              }
          }
          else {
              driveForwards();
              while (abs(yf - yi) > tolerance) {
                  yi = Enes100.getY();
              }
          }
      }
      else {
          Tank.turnOffMotors();
      }
  }
  else if (quadAngle == -PI/2) { // Robot facing down
      if (abs(yf - yi) > tolerance) {
          if (yf > yi) {
              driveBackwards();
              while (abs(yf - yi) > tolerance) {
                  yi = Enes100.getY();
              }
          }
          else {
              driveForwards();
              while (abs(yf - yi) > tolerance) {
                  yi = Enes100.getY();
              }
          }
      }
      else {
          Tank.turnOffMotors();
      }
      if (abs(xf - xi) > tolerance) {
          correctOrientation(PI);
          if (xf > xi) {
              driveBackwards();
              while (abs(xf - xi) > tolerance) {
                  xi = Enes100.getX();
              }
          }
          else {
              driveForwards();
              while (abs(xf - xi) > tolerance) {
                  xi = Enes100.getX();
              }
          }
      }
      else {
          Tank.turnOffMotors();
      }
  }
  else { // Robot facing left
      if (abs(xf - xi) > tolerance) {
          if (xf > xi) {
              driveBackwards();
              while (abs(xf - xi) > tolerance) {
                  xi = Enes100.getX();
              }
          }
          else {
              driveForwards();
              while (abs(xf - xi) > tolerance) {
                  xi = Enes100.getX();
              }
          }
      }
      else {
          Tank.turnOffMotors();
      }
      if (abs(yf - yi) > tolerance) {
          correctOrientation(PI/2);
          if (yf > yi) {
              driveForwards();
              while (abs(yf - yi) > tolerance) {
                  yi = Enes100.getY();
              }
          }
          else {
              driveBackwards();
              while (abs(yf - yi) > tolerance) {
                  yi = Enes100.getY();
              }
          }
      }
      else {
          Tank.turnOffMotors();
      }
  }

  delay(100);  // Small delay to allow motors to react
  Tank.turnOffMotors();
} */

void motorCW (int m1, int m2, int p) {
  digitalWrite(m1, HIGH);
  digitalWrite(m2, LOW);
  analogWrite(S, p);
}

void motorCCW (int m1, int m2, int p) {
  digitalWrite(m1, LOW);
  digitalWrite(m2, HIGH);
  analogWrite(S, p);
}

void motorStop (int m1, int m2) {
  digitalWrite(m1, LOW);
  digitalWrite(m2, LOW);
  digitalWrite(S, LOW);
}

void driveForwards (int p) {
motorCCW(FRD1,FRD2);
motorCW(FLD1,FLD2);
motorCCW(BRD1,BRD2);
motorCW(BLD1,BLD2);
}
void driveBackwards (int p) {
motorCW(FRD1,FRD2);
motorCCW(FLD1,FLD2);
motorCW(BRD1,BRD2);
motorCCW(BLD1,BLD2);
}
void strafeLeft (int p) {
motorCCW(FRD1,FRD2);
motorCW(BRD1,BRD2);
motorCCW(FLD1,FLD2);
motorCW(BLD1,BLD2);
// check if it makes sense plss
}

void strafeRight (int p) {
motorCW(FRD1, FRD2);
motorCCW(BRD1, BRD2);
motorCW(FLD1, FLD2);
motorCCW(BLD1, BLD2);
}

void rotateCW (int p) {
motorCW(FRD1, FRD2);
motorCW(FLD1, FLD2);
motorCW(BRD1, BRD2);
motorCW(BLD1, BLD2);
}

void rotateCCW (int p) {
motorCCW(FRD1, FRD2);
motorCCW(FLD1, FLD2);
motorCCW(BRD1, BRD2);
motorCCW(BLD1, BLD2);
}

void stopotv () {
motorStop(FRD1, FRD2);
motorStop(FLD1, FLD2);
motorStop(BRD1, BRD2);
motorStop(BLD1, BLD2);
}

void setup() {
pinMode (FRD1, OUTPUT);
pinMode (FRD2, OUTPUT);
pinMode (BRD1, OUTPUT);
pinMode (BRD2, OUTPUT);
pinMode (FLD1, OUTPUT);
pinMode (FLD2, OUTPUT);
pinMode (BLD1, OUTPUT);
pinMode (BLD2, OUTPUT);
pinMode (S, OUTPUT);
Enes100.begin("Work in Progress", MATERIAL, 77, 1116, 3, 2);
  delay(200);
  Enes100.print("Successfully connected to the Vision System");
}

void loop() {
  correctOrientation(PI/2);
}
  
