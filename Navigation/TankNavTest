#include "cmath"
#include "iostream"
#include "Arduino.h"
#include "Tank.h"
#include "Enes100.h"

#define PIN_MOTOR_1_REVERSE 11 //FLD1
#define PIN_MOTOR_1_FORWARD 10 //FLD2
#define PIN_MOTOR_2_REVERSE 9 //BLD1
#define PIN_MOTOR_2_FORWARD 8 //BLD2
#define PIN_MOTOR_3_FORWARD 4 //FRD1
#define PIN_MOTOR_3_REVERSE 5 //FRD2
#define PIN_MOTOR_4_FORWARD 2 //BRD1
#define PIN_MOTOR_4_REVERSE 3 //BRD2

// Orients otv to specified angle
void correctOrientation(float tf){
  float ti = Enes100.getTheta();
  float dt = tf - ti;
  Enes100.print(dt);

  if (dt != 0 && dt <= PI) {  // Rotate clockwise
    while  ((tf - ti) > 0.1) {
      ti = Enes100.getTheta();
      rotateCW();
      delay(1);
    }
  } 
  else {  // Rotate counter clockwise
    Enes100.println("I am running! 2");
    rotateCCW();
    while  ((tf - ti) > 0.1) {
      ti = Enes100.getTheta();
      rotateCCW();
      delay(1);
    }
  }
   stopotv();  // Stop when angle is reached
}

void  moveHere(float xf, float yf) {
  float ti = Enes100.getTheta();
  float xi = Enes100.getX();
  float yi = Enes100.getY();
  float quadAngle = round((2*ti)/PI) *(PI/2);
  Enes100.println(quadAngle);
  correctOrientation(quadAngle);
  int quadAngle1 = (int) (quadAngle * (180/PI));

  while (abs(xf - xi) > 0.01 || abs(yf - yi) > 0.01) {  // Continues looping until ideal coordinates are reached
    xi = Enes100.getX();
    yi = Enes100.getY();
    switch (quadAngle1) {
      case 0:  // Facing upwards
        if (yi < yf) {
          driveForwards();
        }
        else if (yi > yf) { 
          driveBackwards();
        }
        if (xi < xf) {
          strafeRight();
        }
        else if (xi > xf) {
          strafeLeft();
        }
        break;

      case 90:  // Facing right
        if (xi < xf) {
          driveForwards();
        }
        else if (xi > xf) {
          driveBackwards();  
        }
        if (yi < yf) {
          strafeLeft(); 
        }
        else if (yi > yf) {
          strafeRight();  
        }
        break;

      case 180:  // Facing downwards
        if (yi > yf) {
          driveForwards(); 
        }
        else if (yi < yf) {
          driveBackwards();  
        }
        if (xi > xf) {
          strafeRight();  
        }
        else if (xi < xf) {
          strafeLeft();  
        }
        break;

      case 270:  // Facing left
        if (xi > xf) {
          driveForwards(); 
        }
        else if (xi < xf) {
          driveBackwards(); 
        }
        if (yi > yf) {
          strafeLeft();  
        }
        else if (yi < yf) {
          strafeRight(); 
        }
        break;
    }
    
    xi = Enes100.getX(); 
    yi = Enes100.getY(); 

    delay(1);  // Small delay to allow motors to react
  }
  Enes100.println("I am not running! :( 2");
  stopotv();
}

void motorCW (int m1, int m2) {
  digitalWrite(m1, HIGH);
  digitalWrite(m2, LOW);
}

void motorCCW (int m1, int m2) {
  digitalWrite(m1, LOW);
  digitalWrite(m2, HIGH);
}

void motorStop (int m1, int m2) {
  digitalWrite(m1, LOW);
  digitalWrite(m2, LOW);
}

void driveForwards () {  
motorCW(PIN_MOTOR_3_FORWARD,PIN_MOTOR_3_REVERSE);
motorCCW(PIN_MOTOR_1_FORWARD,PIN_MOTOR_1_REVERSE);
motorCW(PIN_MOTOR_4_FORWARD,PIN_MOTOR_4_REVERSE);
motorCCW(PIN_MOTOR_2_FORWARD,PIN_MOTOR_2_REVERSE);
}
void driveBackwards () { 
motorCCW(PIN_MOTOR_3_FORWARD,PIN_MOTOR_3_REVERSE);
motorCW(PIN_MOTOR_1_FORWARD,PIN_MOTOR_1_REVERSE);
motorCCW(PIN_MOTOR_4_FORWARD,PIN_MOTOR_4_REVERSE);
motorCW(PIN_MOTOR_2_FORWARD,PIN_MOTOR_2_REVERSE);
}
void strafeLeft () {
motorCW(PIN_MOTOR_3_FORWARD,PIN_MOTOR_3_REVERSE);
motorCW(PIN_MOTOR_1_FORWARD,PIN_MOTOR_1_REVERSE);
motorCCW(PIN_MOTOR_4_FORWARD,PIN_MOTOR_4_REVERSE);
motorCCW(PIN_MOTOR_2_FORWARD,PIN_MOTOR_2_REVERSE);
// check if it makes sense plss
}

void strafeRight () {
motorCCW(PIN_MOTOR_3_FORWARD, PIN_MOTOR_3_REVERSE);
motorCCW(PIN_MOTOR_1_FORWARD, PIN_MOTOR_1_REVERSE);
motorCW(PIN_MOTOR_4_FORWARD, PIN_MOTOR_4_REVERSE);
motorCW(PIN_MOTOR_2_FORWARD, PIN_MOTOR_2_REVERSE);
}

void rotateCW () { // this is actually counter clockwise
motorCW(PIN_MOTOR_3_FORWARD, PIN_MOTOR_3_REVERSE);
motorCW(PIN_MOTOR_1_FORWARD, PIN_MOTOR_1_REVERSE);
motorCW(PIN_MOTOR_4_FORWARD, PIN_MOTOR_4_REVERSE);
motorCW(PIN_MOTOR_2_FORWARD, PIN_MOTOR_2_REVERSE);
}

void rotateCCW () { // this is clockwise 
motorCCW(PIN_MOTOR_3_FORWARD, PIN_MOTOR_3_REVERSE);
motorCCW(PIN_MOTOR_1_FORWARD, PIN_MOTOR_1_REVERSE);
motorCCW(PIN_MOTOR_4_FORWARD, PIN_MOTOR_4_REVERSE);
motorCCW(PIN_MOTOR_2_FORWARD, PIN_MOTOR_2_REVERSE);
}

void stopotv () {
motorStop(PIN_MOTOR_3_FORWARD,PIN_MOTOR_3_REVERSE);
motorStop(PIN_MOTOR_1_FORWARD,PIN_MOTOR_1_REVERSE);
motorStop(PIN_MOTOR_4_FORWARD,PIN_MOTOR_4_REVERSE);
motorStop(PIN_MOTOR_2_FORWARD,PIN_MOTOR_2_REVERSE);
}



void setup() {
  Tank.begin();
  Enes100.begin("Work in Progress", MATERIAL, 15, 1116, 52, 50);
  delay(200);
  Enes100.println("Successfully connected to the Vision System");
}

void loop() {
  float x, y, t; bool v; // Declare variables to hold the data
  x = Enes100.getX();  // Your X coordinate! 0-4, in meters, -1 if no aruco is not visibility (but you should use Enes100.isVisible to check that instead)
  y = Enes100.getY();  // Your Y coordinate! 0-2, in meters, also -1 if your aruco is not visible.
  t = Enes100.getTheta();  //Your theta! -pi to +pi, in radians, -1 if your aruco is not visible.
  v = Enes100.isVisible(); // Is your aruco visible? True or False.

  if (v) // If the ArUco marker is visible
    {
        moveHere(1.0, 2.0);
    }
    else { // otherwise
        Enes100.println("Not visible"); // print not visible
    }
}
  
