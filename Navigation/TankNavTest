#include <Enes100.h>
#include "Tank.h"

#define PIN_MOTOR_1_REVERSE 11 //FLD1
#define PIN_MOTOR_1_FORWARD 10 //FLD2
#define PIN_MOTOR_2_REVERSE 9 //BLD1
#define PIN_MOTOR_2_FORWARD 8 //BLD2
#define PIN_MOTOR_3_FORWARD 4 //FRD1
#define PIN_MOTOR_3_REVERSE 5 //FRD2
#define PIN_MOTOR_4_FORWARD 2 //BRD1
#define PIN_MOTOR_4_REVERSE 3 //BRD2

void startOrientation() {
  float xi = Enes100.getX();
  float yi = Enes100.getY();
  float ti = Enes100.getTheta();
  float vi = Enes100.isVisible();

  if (x == 0.55 && y == 0.55) {
    while (t != 1.57079632679) {
      rotateCCW();
      t = Enes100.getTheta();
    }
    driveForward();
    delay(7000);
  } else if (x == 0.55 && y == 1.45) {
    while (t != -1.57079632679) {
      rotateCCW();
      t = Enes100.getTheta();
    }
    driveForward();
    delay(7000);
  }
}

// Orients otv to specified angle
void correctOrientation(float tf){
  float ti = Enes100.getTheta();
  float dt = ((tf - (ti + 2*PI)) % (2*PI));

  if (dt != 0 && dt <= PI) {  // Rotate clockwise
    rotateCW();
    while  (((tf - (ti + 2*PI)) % (2*PI)) > 0.1) {
      ti = Enes100.getTheta();
      delay(1)
    }
  } 
  else {  // Rotate counter clockwise
    rotateCCW();
    while  (((tf - (ti + 2*PI)) % (2*PI)) > 0.1) {
      ti = Enes100.getTheta();
      delay(1)
    }
  }
   stopotv()  // Stop when angle is reached
}

void motorCW (int m1, int m2) {
  digitalWrite(m1, HIGH);
  digitalWrite(m2, LOW);
}

void motorCCW (int m1, int m2) {
  digitalWrite(m1, LOW);
  digitalWrite(m2, HIGH);
}

void motorStop (int m1, int m2) {
  digitalWrite(m1, LOW);
  digitalWrite(m2, LOW);
}

void driveForward () {  
motorCW(PIN_MOTOR_3_FORWARD,PIN_MOTOR_3_REVERSE);
motorCCW(PIN_MOTOR_1_FORWARD,PIN_MOTOR_1_REVERSE);
motorCW(PIN_MOTOR_4_FORWARD,PIN_MOTOR_4_REVERSE);
motorCCW(PIN_MOTOR_2_FORWARD,PIN_MOTOR_2_REVERSE);
}
void driveBackwards () { 
motorCCW(PIN_MOTOR_3_FORWARD,PIN_MOTOR_3_REVERSE);
motorCW(PIN_MOTOR_1_FORWARD,PIN_MOTOR_1_REVERSE);
motorCCW(PIN_MOTOR_4_FORWARD,PIN_MOTOR_4_REVERSE);
motorCW(PIN_MOTOR_2_FORWARD,PIN_MOTOR_2_REVERSE);
}
void strafeLeft () {
motorCW(PIN_MOTOR_3_FORWARD,PIN_MOTOR_3_REVERSE);
motorCW(PIN_MOTOR_1_FORWARD,PIN_MOTOR_1_REVERSE);
motorCCW(PIN_MOTOR_4_FORWARD,PIN_MOTOR_4_REVERSE);
motorCCW(PIN_MOTOR_2_FORWARD,PIN_MOTOR_2_REVERSE);
// check if it makes sense plss
}

void strafeRight () {
motorCCW(PIN_MOTOR_3_FORWARD, PIN_MOTOR_3_REVERSE);
motorCCW(PIN_MOTOR_1_FORWARD, PIN_MOTOR_1_REVERSE);
motorCW(PIN_MOTOR_4_FORWARD, PIN_MOTOR_4_REVERSE);
motorCW(PIN_MOTOR_2_FORWARD, PIN_MOTOR_2_REVERSE);
}

void rotateCW () { // this is actually counter clockwise
motorCW(PIN_MOTOR_3_FORWARD, PIN_MOTOR_3_REVERSE);
motorCW(PIN_MOTOR_1_FORWARD, PIN_MOTOR_1_REVERSE);
motorCW(PIN_MOTOR_4_FORWARD, PIN_MOTOR_4_REVERSE);
motorCW(PIN_MOTOR_2_FORWARD, PIN_MOTOR_2_REVERSE);
}

void rotateCCW () { // this is clockwise 
motorCCW(PIN_MOTOR_3_FORWARD, PIN_MOTOR_3_REVERSE);
motorCCW(PIN_MOTOR_1_FORWARD, PIN_MOTOR_1_REVERSE);
motorCCW(PIN_MOTOR_4_FORWARD, PIN_MOTOR_4_REVERSE);
motorCCW(PIN_MOTOR_2_FORWARD, PIN_MOTOR_2_REVERSE);
}

void stopotv () {
motorStop(PIN_MOTOR_3_FORWARD,PIN_MOTOR_3_REVERSE);
motorStop(PIN_MOTOR_1_FORWARD,PIN_MOTOR_1_REVERSE);
motorStop(PIN_MOTOR_4_FORWARD,PIN_MOTOR_4_REVERSE);
motorStop(PIN_MOTOR_2_FORWARD,PIN_MOTOR_2_REVERSE);
}



void setup() {
  Tank.begin(); // Must call in order to use any Tank function
  // Initialize Enes100 Library
  // Team Name, Mission Type, Marker ID, Room Number, Wifi Module TX Pin, Wifi Module RX Pin
  Enes100.begin("Work in Progress", MATERIAL, 205, 1116, 3, 2);
  // At this point we know we are connected.
  Enes100.println("Connected...");
  float x, y, t; bool v; // Declare variables to hold the data
}

void loop() {
  x = Enes100.getX();  // Your X coordinate! 0-4, in meters, -1 if no aruco is not visibility (but you should use Enes100.isVisible to check that instead)
  y = Enes100.getY();  // Your Y coordinate! 0-2, in meters, also -1 if your aruco is not visible.
  t = Enes100.getTheta();  //Your theta! -pi to +pi, in radians, -1 if your aruco is not visible.
  v = Enes100.isVisible(); // Is your aruco visible? True or False.

  if (v) // If the ArUco marker is visible
    {
        startOrientation();
        Enes100.print(x); // print out the location
        Enes100.print(",");
        Enes100.print(y);
        Enes100.print(",");
        Enes100.println(t);
    }
    else { // otherwise
        Enes100.println("Not visible"); // print not visible
        
    }
    // Transmit the weight of the material (in this case, the material is light)
    Enes100.mission(WEIGHT, LIGHT);
    // Transmit the MATERIAL_TYPE of the material (Foam or Plastic, in this case FOAM)
    Enes100.mission(MATERIAL_TYPE, FOAM);
    delay(1000);
}
  
