#include "cmath"
#include "iostream"
#include "Arduino.h"
#include "Tank.h"
#include "Enes100.h"

void driveForwards() {
  Tank.setRightMotorPWM(50);
  Tank.setLeftMotorPWM(50);
}

void driveBackwards() {
  Tank.setRightMotorPWM(-50);
  Tank.setLeftMotorPWM(-50);
}

void motorCW() {
  Tank.setRightMotorPWM(-25);
  Tank.setLeftMotorPWM(25);
}

void motorCCW() {
  Tank.setRightMotorPWM(25);
  Tank.setLeftMotorPWM(-25);
}

// Normalize angle to [-π, π]
float normalizeAngle(float angle) {
  while (angle > PI) angle -= 2 * PI;
  while (angle < -PI) angle += 2 * PI;
  return angle;
}

// Proportional angle correction
void correctOrientation(float tf) {
  float ti = Enes100.getTheta();
  float dt = normalizeAngle(tf - ti);
  float Kp = 50.0;

  while (abs(dt) > 0.05) {
    ti = Enes100.getTheta();
    dt = normalizeAngle(tf - ti);
    int pwmSpeed = Kp * abs(dt);
    if (pwmSpeed > 255) pwmSpeed = 255;

    if (dt > 0) {
      Tank.setRightMotorPWM(pwmSpeed);
      Tank.setLeftMotorPWM(-pwmSpeed);
    } else {
      Tank.setRightMotorPWM(-pwmSpeed);
      Tank.setLeftMotorPWM(pwmSpeed);
    }
    delay(10);
  }
  Tank.turnOffMotors();
}

void moveHere(float xf, float yf) {
  float xi = Enes100.getX();
  float yi = Enes100.getY();
  float ti = Enes100.getTheta();
  float quadAngle = 0;

  if (ti >= 3 * PI / 4 || ti < -3 * PI / 4)      quadAngle = PI;
  else if (ti >= PI / 4)                         quadAngle = PI / 2;
  else if (ti >= -PI / 4)                        quadAngle = 0;
  else                                           quadAngle = -PI / 2;

  correctOrientation(quadAngle);

  float tolerance = 0.1;  // Increased tolerance for linear movement

  if (quadAngle == PI/2) { // Robot facing up
      if (abs(yf - yi) > tolerance) {
          if (yf > yi) {
              driveForwards();
              while (abs(yf - yi) > tolerance) {
                  yi = Enes100.getY();
              }
          }
          else {
              driveBackwards();
              while (abs(yf - yi) > tolerance) {
                  yi = Enes100.getY();
              }
          }
      }
      else {
          Tank.turnOffMotors();
      }
      if (abs(xf - xi) > tolerance) {
          correctOrientation(0);
          if (xf > xi) {
              driveForwards();
              while (abs(xf - xi) > tolerance) {
                  xi = Enes100.getX();
              }
          }
          else {
              driveBackwards();
              while (abs(xf - xi) > tolerance) {
                  xi = Enes100.getX();
              }
          }
      }
      else {
          Tank.turnOffMotors();
      }
  }
  else if (quadAngle == 0) { // Robot facing right
      if (abs(xf - xi) > tolerance) {
          if (xf > xi) {
              driveForwards();
              while (abs(xf - xi) > tolerance) {
                  xi = Enes100.getX();
              }
          }
          else {
              driveBackwards();
              while (abs(xf - xi) > tolerance) {
                  xi = Enes100.getX();
              }
          }
      }
      else {
          Tank.turnOffMotors();
      }
      if (abs(yf - yi) > tolerance) {
          correctOrientation(-PI/2);
          if (yf > yi) {
              driveBackwards();
              while (abs(yf - yi) > tolerance) {
                  yi = Enes100.getY();
              }
          }
          else {
              driveForwards();
              while (abs(yf - yi) > tolerance) {
                  yi = Enes100.getY();
              }
          }
      }
      else {
          Tank.turnOffMotors();
      }
  }
  else if (quadAngle == -PI/2) { // Robot facing down
      if (abs(yf - yi) > tolerance) {
          if (yf > yi) {
              driveBackwards();
              while (abs(yf - yi) > tolerance) {
                  yi = Enes100.getY();
              }
          }
          else {
              driveForwards();
              while (abs(yf - yi) > tolerance) {
                  yi = Enes100.getY();
              }
          }
      }
      else {
          Tank.turnOffMotors();
      }
      if (abs(xf - xi) > tolerance) {
          correctOrientation(PI);
          if (xf > xi) {
              driveBackwards();
              while (abs(xf - xi) > tolerance) {
                  xi = Enes100.getX();
              }
          }
          else {
              driveForwards();
              while (abs(xf - xi) > tolerance) {
                  xi = Enes100.getX();
              }
          }
      }
      else {
          Tank.turnOffMotors();
      }
  }
  else { // Robot facing left
      if (abs(xf - xi) > tolerance) {
          if (xf > xi) {
              driveBackwards();
              while (abs(xf - xi) > tolerance) {
                  xi = Enes100.getX();
              }
          }
          else {
              driveForwards();
              while (abs(xf - xi) > tolerance) {
                  xi = Enes100.getX();
              }
          }
      }
      else {
          Tank.turnOffMotors();
      }
      if (abs(yf - yi) > tolerance) {
          correctOrientation(PI/2);
          if (yf > yi) {
              driveForwards();
              while (abs(yf - yi) > tolerance) {
                  yi = Enes100.getY();
              }
          }
          else {
              driveBackwards();
              while (abs(yf - yi) > tolerance) {
                  yi = Enes100.getY();
              }
          }
      }
      else {
          Tank.turnOffMotors();
      }
  }

  delay(100);  // Small delay to allow motors to react
  Tank.turnOffMotors();
}

void mission() {
  if (Enes100.getY() > 1) {
    correctOrientation(-PI / 2);
    moveHere(0.55, 0.20);
  } else {
    correctOrientation(PI / 2);
    moveHere(0.55, 1.80);
  }
}

void finish(float x) {
  moveHere(0.55, 1.88);
  moveHere(3.5, 1.88);
  if (x > 3.1) {
    Tank.turnOffMotors();
  }
}

void setup() {
  Tank.begin();
  Enes100.begin("Work in Progress", MATERIAL, 15, 1116, 52, 50);
  delay(200);
  Enes100.println("Successfully connected to the Vision System");
  mission();
}

void loop() {
  float x = Enes100.getX();
  float y = Enes100.getY();
  float t = Enes100.getTheta();
  bool v = Enes100.isVisible();
  if (v) {
    finish(x);
  }
}
